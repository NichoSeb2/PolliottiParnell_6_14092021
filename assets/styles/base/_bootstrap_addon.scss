@function rgb-css-var($identifier, $target) {
	@if $identifier == "body" and $target == "bg" {
		@return rgb(var(--#{$variable-prefix}#{$identifier}-bg-rgb));
	}
	@if $identifier == "body" and $target == "text" {
		@return rgb(var(--#{$variable-prefix}#{$identifier}-color-rgb));
	} @else {
		@return rgb(var(--#{$variable-prefix}#{$identifier}-rgb));
	}
}

.fs-0 {
	font-size: 4rem;
}

.text-justify {
	text-align: justify;
}

.bg-image {
	background-repeat: no-repeat;
	background-size: cover;
	background-position: center center;
}

.bg-shade {
	background-color: rgba(0, 0, 0, 0.4);
	background-blend-mode: multiply;
}

.h-2px {
	height: 2px !important;
}

.w-80 {
	width: 80% !important;
}

.min-vw-50 {
	min-width: 50vw;
}

.fw-inherit {
	font-weight: inherit !important;
}

.modal-fullscreen {
	.modal-dialog {
		max-height: 90vh;
		max-width: 100vw !important;
		width: fit-content !important;
		margin: 1.75rem auto;

		.modal-content {
			height: 100%;
			max-height: 90vh;

			border-radius: 0.3rem;

			.modal-header {
				.modal-title {
					max-width: 60vw;
				}
			}

			.modal-body {
				width: fit-content !important;

				img {
					// height: 100%;
					width: 100%;
					width: 70vw;
					aspect-ratio: initial;
				}

				.video_wrapper {
					width: 70vw;
				}
			}
		}
	}
}

.table {
	.even {
		background-color: white;
	}
}

.form-check {
	margin: 0 .5rem;
	margin-bottom: 0.125rem;

	.form-check-label {
		user-select: none;
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $position in $positions {
			.position#{$infix}-#{$position} {
				position: $position !important;
			}
		}
	}
}

@each $z in $z-index {
	.zi-#{$z} {
		z-index: $z !important;
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $z in $z-index {
			.zi#{$infix}-#{$z} {
				z-index: $z !important;
			}
		}
	}
}

$alpha: rgba(0, 0, 0, 0.1);
.bg-alpha {
	background-color: $alpha;
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $key, $value in map-loop($utilities-bg, rgb-css-var, "$key", "bg") {
			.bg#{$infix}-#{$key} {
				background-color: $value !important;
			}
		}

		.bg#{$infix}-transparent {
			background-color: transparent !important;
		}

		.bg#{$infix}-alpha {
			background-color: $alpha;
		}
	}
}
